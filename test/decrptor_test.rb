gem 'minitest'
require 'minitest/autorun'
require 'minitest/pride'
require './lib/decryptor'

class DecryptorTest < Minitest::Test

  def test_it_generates_a_master_cipher
    skip
    result = Decryptor.new("hello", "41521", "020315")
    result.generate_cipher
    array = [{"a"=>"2", "b"=>"3", "c"=>"4", "d"=>"5", "e"=>"6", "f"=>"7", "g"=>"8", "h"=>"9", "i"=>" ", "j"=>".", "k"=>",", "l"=>"a", "m"=>"b", "n"=>"c", "o"=>"d", "p"=>"e", "q"=>"f", "r"=>"g", "s"=>"h", "t"=>"i", "u"=>"j", "v"=>"k", "w"=>"l", "x"=>"m", "y"=>"n", "z"=>"o", "0"=>"p", "1"=>"q", "2"=>"r", "3"=>"s", "4"=>"t", "5"=>"u", "6"=>"v", "7"=>"w", "8"=>"x", "9"=>"y", " "=>"z", "."=>"0", ","=>"1"}, {"a"=>"w", "b"=>"x", "c"=>"y", "d"=>"z", "e"=>"0", "f"=>"1", "g"=>"2", "h"=>"3", "i"=>"4", "j"=>"5", "k"=>"6", "l"=>"7", "m"=>"8", "n"=>"9", "o"=>" ", "p"=>".", "q"=>",", "r"=>"a", "s"=>"b", "t"=>"c", "u"=>"d", "v"=>"e", "w"=>"f", "x"=>"g", "y"=>"h", "z"=>"i", "0"=>"j", "1"=>"k", "2"=>"l", "3"=>"m", "4"=>"n", "5"=>"o", "6"=>"p", "7"=>"q", "8"=>"r", "9"=>"s", " "=>"t", "."=>"u", ","=>"v"}, {"a"=>"y", "b"=>"z", "c"=>"0", "d"=>"1", "e"=>"2", "f"=>"3", "g"=>"4", "h"=>"5", "i"=>"6", "j"=>"7", "k"=>"8", "l"=>"9", "m"=>" ", "n"=>".", "o"=>",", "p"=>"a", "q"=>"b", "r"=>"c", "s"=>"d", "t"=>"e", "u"=>"f", "v"=>"g", "w"=>"h", "x"=>"i", "y"=>"j", "z"=>"k", "0"=>"l", "1"=>"m", "2"=>"n", "3"=>"o", "4"=>"p", "5"=>"q", "6"=>"r", "7"=>"s", "8"=>"t", "9"=>"u", " "=>"v", "."=>"w", ","=>"x"}, {"a"=>"n", "b"=>"o", "c"=>"p", "d"=>"q", "e"=>"r", "f"=>"s", "g"=>"t", "h"=>"u", "i"=>"v", "j"=>"w", "k"=>"x", "l"=>"y", "m"=>"z", "n"=>"0", "o"=>"1", "p"=>"2", "q"=>"3", "r"=>"4", "s"=>"5", "t"=>"6", "u"=>"7", "v"=>"8", "w"=>"9", "x"=>" ", "y"=>".", "z"=>",", "0"=>"a", "1"=>"b", "2"=>"c", "3"=>"d", "4"=>"e", "5"=>"f", "6"=>"g", "7"=>"h", "8"=>"i", "9"=>"j", " "=>"k", "."=>"l", ","=>"m"}]
    assert_equal array, result.master_cipher
  end

  def test_it_can_encrypt_a_message
    result = Decryptor.new("48ax", "41521", "020315")
    assert_equal "try ", result.decrypt
  end
end
